//SPDX-License-Identifier: MIT
// WWWWWWWWWWWWWKKKKKKKKKKKKKKKKKKKKKEEEEEEEEEEEEEEEEEEEEEEEEEEEEKKEKKKKKKKKKKKKKKKKKWWWWWWWWWWWWWWW###
// WWWWWWWWWWWWKKKKKKKKKKKKKEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEKKKKKKKKKKWWWWWWWWWWWWWWW##
// WWWWWWWWWWWKKKKKKKKKKEEEEEEEEEEEEEEEEEEEEEEEEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEKKKKKKKKWWWWWWWWWWWWWW##
// WWWWWWWWWWWKKKKKKKEEEEEEEEEEEEEEEEEEEEEDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEEEEEEEEKKKKKKKWWWWWWWWWWWWW##
// WWWWWWWWWWKKKKKEEEEEEEEEEEEEDDDDDDDDDDDDDDDDDGGGGDDDDDDDDDDDDDDDDDDDDDDEEEEEEEEEKKKKKWWWWWWWWWWWWWW#
// WWWWWWWWWWKKKKKEEEEEDDDDDDDDDDDDDDDDDGGGGGGLLLfLLLLGGGGGGGGGDDDDDDDDDDDDDDDDDEEEEKKKKKWWWWWWWWWWWWW#
// WWWWWWWWWKKKKKEEEDDDDDDDGGGGGGGGGGLLLLLffjt;..   ..,ttjffLfLLLLGGGGGGGGGGGGGDDDEEEKKKKKWWWWWWWWWWWWW
// WWWWWWWWWKKKKEEEDDGGGGGLLLLLLfffjt;,.  .,;tjjfj:fffjjt;,.   .:,itjjffffLLLLLLGGDEEKKKKKKWWWWWWWWWWWW
// WWWWWWWWWKKKKEEDGGfffjjjt;:.   :;ijjffLLLLLLLLf:LLGGGLLLLLLfffjti;,.   ..:;ittfGDEEKKKKWWWWWWWWWWWWW
// WWWWWWWWKKKKEEEDL,.    :;itjjfffLLLLLGGGGGGGGLf:LGGGGGGGGGGGGLLLLLfffjjjti;:   LDEEKKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKEEDDf ,.  .:;tjjffffLLLLLGGGGGGGGLf:LGGGGGGGGGGGGGLLLLffjji:  :;tt LDEEKKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKEEDGL jffjjt;:   .;tjjffLLLLLLLLLLj:fLGGGGGGGGLLLLffjt,  .;tjffLLj LDEEEKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKEEDDL jLLLLLLLffjji:   .,itjffffffj.fLLLLLLLLffjt;.  :ijffLLLGGGLf.LDEEEKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKEEDDL.jLGGGGGGGGGLLLffjti,   .:;ttt.jfffffjji.  .;tjfLLGGGGGGGGGGj,LDEEEKKKKWWWWWWWWWWWW
// WWWWWWWKKKKKEEEDL,jLGDDDDDDDGGGGGGGLLLffjji,.   .,ii,   :tjffLLGGGGGDDDDDDDGGj;GDEEEKKKKKWWWWWWWWWWW
// WWWWWWWKKKKKEEEDGiiGGDDDDDDDDDDDDDDGGGGGLLLL####E,  ;tjffLLGGGGGDDDDDDDDDDDDGttGDEEKKKKKKWWWWWWWWWWW
// WWWWWWWKKKKKEEEDGj;GDDDDDDDDDDDDDDDDDDDGGGG######,:E######GGDDDDDDDDDDDDDDDDG;jGDEEEKKKKKWWWWWWWWWWW
// WWWWWWWKKKKKKEEDGj:LDDDEEEEEEEEEEDDDDDDDDD####D       #####DDDDDDEEEEEEEEDDDL,jGDEEKKKKKKWWWWWWWWWWW
// WWWWWWWKKKKKKEEDGf.LDDDEEEEEEEEEEEEEDDDDDD###:         ####WDDDEEEEEEEEEEDDDL.fGDEEKKKKKKWWWWWWWWWWW
// WWWWWWWKKKKKKEEDGf LDDEEEEEEEEEEEEEEEEEDDD##E           ###WEEEEEEEEEEEEEEDDL fDDEEKKKKKKWWWWWWWWWWW
// WWWWWWWKKKKKKEEDDL LDDEEEEEEEEEEEEEEEEEEDD##            ###EEEEEEEEEEEEEEEDDL LDDEEKKKKKKWWWWWWWWWWW
// WWWWWWWKKKKKKEEEDL.fGDEEEEEEEEEEEEEEEEEEED##     ##     :##EEEEEEEEEEEEEEEDDL LDEEEKKKKKKWWWWWWWWWWW
// WWWWWWWWKKKKKEEEDL:jGDEEEEEEEEEEEEEEEEEEED#W     ##t     ##EEEEEEEEEEEEEEEDGf LDEEEKKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKKEEEDG,jGDEEEEEEEEEEEEEEEEEEEE#;     ##.     ##EEEEEEEEEEEEEEEDGf:GDEEEKKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKKEEEDGttGDEEEEEEEEEEEEEEEEEEEE#.     ##      ##EEEEEEEEEEEEEEEDGj;GDEEEKKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKKKEEDGjiGDEEEEEEEEEEEEEEEEEEEE###W;  ##     :##EEEEEEEEEEEEEEEDGjtGDEEEKKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKKKEEDGf,GDEEEEEEEEEEEEEEEEEEE###E   :##     D##EEEEEEEEEEEEEEEDGtjGDEEEKKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKKKEEDGf LDDEEEEEEEEEEEEEEEEEE###    E##     ###EEEEEEEEEEEEEEEDG,jGDEEEKKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKKKEEDDL LDDEEEEEEEEEEEEEEEEEE##     ###    :###EEEEEEEEEEEEEEEDG.fGDEEKKKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKKKEEEDL LDDEEEEEEEEEEEEEEEEEE##     ###    ###KEEEEEEEEEEEEEEEDL.fDEEEKKKKKKWWWWWWWWWWWW
// WWWWWWWWKKKKKKEEEDL fGDEEEEEEEEEEEEEEEEEE##     ###  W####EEEEEEEEEEEEEEEDDL LDEEEKKKKKWWWWWWWWWWWWW
// WWWWWWWWKKKKKKEEEDG.fGDEEEEEEEEEEEEEEEEEE##     ##f    :##EEEEEEEEEEEEEEEDDL LDEEEKKKKKWWWWWWWWWWWWW
// WWWWWWWWKKKKKKEEEDG,jGDEEEEEEEEEEEEEEEEEE#D     ##;     ##EEEEEEEEEEEEEEEDDL LDEEEKKKKKWWWWWWWWWWWWW
// WWWWWWWWKKKKKKKEEDGttGDEEEEEEEEEEEEEEEEEE#G     ##      ##EEEEEEEEEEEEEEEDGf:GDEEKKKKKKWWWWWWWWWWWWW
// WWWWWWWWWKKKKKKEEDGjiGDEEEEEEEEEEEEEEEEEE##     ##     ,##EEEEEEEEEEEEEEEDDf;GDEEEKKKKKWWWWWWWWWWWWW
// WWWWWWWWWKKKKKKEEDGf,LDDEEEEEEEEEEEEEEEEW##            ###EEEEEEEEEEEEEEEDGjiGDEEEKKKKKWWWWWWWWWWWWW
// WWWWWWWWWKKKKKKEEDDf.GDDEEEEEEEEEEEEEEEE###f           ###DEEEEEEEEEEEEEEDGttGDEEKKKKKKWWWWWWWWWWWWW
// WWWWWWWWWKKKKKKEEEDL LDDEEEEEEEEEEEEEEED####.         ####DDEEEEEEEEEEEEEDG;jDDEEKKKKKKWWWWWWWWWWWWW
// WWWWWWWWWWKKKKKEEEDL LDDEEEEEEEEEEEEEDDDE####;       ####WDDDDEEEEEEEEEEDDG,fGDEEKKKKKKWWWWWWWWWWWWW
// WWWWWWWWWWKKKKKEEEDL fGDEEEEEEEEEEEDDDDGL######G  j######GGDDDDDEEEEEEEEDDG.fDDEEKKKKKKWWWWWWWWWWWWW
// WWWWWWWWWWKKKKKEEEDG.fGDDEEEEEEEDDDDGGLt iLLGGGE#########tfLGGDDDDDEEEEDDDL LDDEEKKKKKKWWWWWWWWWWWWW
// WWWWWWWWWWKKKKKKEEDG,jGDDEEEEEDDDDGGfi tLGGGDDGGGf,;fLLLLj..jfLGGDDDDDDDDGL LDEEEKKKKKKWWWWWWWWWWWWW
// WWWWWWWWWWKKKKKKEEDGitGDDDDDDDDDGLf:.jLGGDDDDDDGGL,;LGGGGGLLt..jLLGGDDDDDGL LDEEEKKKKKWWWWWWWWWWWWWW
// WWWWWWWWWWKKKKKKEEDGjiGDDDDDDGGLj.,fGGDDDDDDDDDDGL,;LGGDDDDGGLft :jLLGGGGGf.GDEEEKKKKKWWWWWWWWWWWWWW
// WWWWWWWWWWKKKKKKEEDGf;LGDDGGGLt ifGGDDDDDDDDDDDDGL,iLGDDDDDDDDGGLfi :jfLGLf,GDEEKKKKKKWWWWWWWWWWWWWW
// WWWWWWWWWWWKKKKKEEDDf.LGGGLf; tLLDDDDDEEEEEEDDDDGL,iLGDDDDDDDDDDGGGLf; ,jfj;GDEEKKKKKWWWWWWWWWWWWWWW
// WWWWWWWWWWWKKKKKEEDDf fLLj..jLGGDDDDEEEEEEEEEDDDGL,iLGDDDDDDDDDDDDDGGLfj, :tGDEEKKKKKKWWWWWWWWWWWWW#
// WWWWWWWWWWWKKKKKEEEDL jt ,fLGGDDDDDEEEEEEEEEEDDDGL,iLGDDDDEEEEEDDDDDGGGLfi fDDEEKKKKKWWWWWWWWWWWWWW#
// WWWWWWWWWWWKKKKKKEEDL  ;jLLGGDDDDEEEEEEEEEEEEDDDGL,iLGDDDEEEEEEDDDDDDGLf,:fGDEEEKKKKKWWWWWWWWWWWWWW#
// WWWWWWWWWWWWKKKKKEEDGj ,fLGGDDDDDEEEEEEEEEEEEDDDGL,iLGDDDEEEEEEDDDDDGLf.iLGDDEEKKKKKKWWWWWWWWWWWWWW#
// WWWWWWWWWWWWKKKKKEEEDGfi tfLGDDDDDEEEEEEEEEEEEDDGL,iLGDDDEEEEEEDDDDGLj jLGDDEEEKKKKKWWWWWWWWWWWWWW##
// WWWWWWWWWWWWKKKKKKEEEDGLf; jLGGDDDDEEEEEEEEEEEDDGL,iLGDDDEEEEDDDDGGL;.fGDDEEEEKKKKKKWWWWWWWWWWWWWW##
// WWWWWWWWWWWWWKKKKKKEEEDDGLf:.jLGDDDDDEEEEEEEEDDDGL,iLGDDDDDDDDDDGGf.;LGDDEEEEKKKKKKWWWWWWWWWWWWWWW##
// WWWWWWWWWWWWWKKKKKKKEEEDDDGLj ,fLGDDDDEEEEEEEDDDGL,iLGDDDDDDDDDGLj jLGDDEEEEKKKKKKKWWWWWWWWWWWWW####
// WWWWWWWWWWWWWWKKKKKKKEEEEDDDGLt ifGGDDDDEEEEEDDDGL,iLGDDDDDDDGGL;.fGGDDEEEEKKKKKKKWWWWWWWWWWWWWW####
// WWWWWWWWWWWWWWWKKKKKKKEEEEDDDGLf; tLGGDDDDDDDDDDGL,iLGDDDDDDGLf.,LGDDEEEEEKKKKKKKWWWWWWWWWWWWWWW####
// #WWWWWWWWWWWWWWWKKKKKKKEEEEEDDDGLf:.jLGGDDDDDDDDGL,iLGDDDDDGLj tLGDDEEEEEKKKKKKKKWWWWWWWWWWWWWWW####
// #WWWWWWWWWWWWWWWKKKKKKKKEEEEEEDDDGLj :fLGGDDDDDDGL,iLGGDDGGfi jLGDDEEEEKKKKKKKKKWWWWWWWWWWWWWWWW####
// #WWWWWWWWWWWWWWWWWKKKKKKKKEEEEEEDDDGLt ;fLGGDDDGGL,iLGGGGLf::fGDDDEEEEKKKKKKKKKWWWWWWWWWWWWWWWW#####
// #WWWWWWWWWWWWWWWWWWKKKKKKKKEEEEEEEDDGLf; tfLGGGGGL,iLGGGLj iLGDDEEEEEKKKKKKKKKWWWWWWWWWWWWWWWWW#####
// ###WWWWWWWWWWWWWWWWWKKKKKKKKKKEEEEEDDDGLf: jLLGGGL,iLLLfi jLGDDEEEEKKKKKKKKKKWWWWWWWWWWWWWWWWW######
// ###WWWWWWWWWWWWWWWWWWKKKKKKKKKKEEEEEEDDGGLj .jLLLf,ifLf:.fLGDDEEEEKKKKKKKKKKWWWWWWWWWWWWWWWWWW######
// ###WWWWWWWWWWWWWWWWWWWKKKKKKKKKKKEEEEEEDDGGft ,jff:ijt ;fGGDDEEEEKKKKKKKKKKWWWWWWWWWWWWWWWWWW#######
// ###W#WWWWWWWWWWWWWWWWWWWKKKKKKKKKKKEEEEEDDDGLf; ;j:ii tLGDDDEEEEKKKKKKKKKWWWWWWWWWWWWWWWWWWWW#######
// #####WWWWWWWWWWWWWWWWWWWWKKKKKKKKKKKEEEEEEDDDGLj:....jLGDDDEEEEKKKKKKKKKKWWWWWWWWWWWWWWWWWWWW#######
// #####WWWWWWWWWWWWWWWWWWWWWKKKKKKKKKKKKEEEEEDDDGGLt ,fLGDDEEEEEKKKKKKKKKKWWWWWWWWWWWWWWWWWWWWW#######
// ######WWWWWWWWWWWWWWWWWWWWWKKKKKKKKKKKKEEEEEEDDDGLLLGGDDEEEEEKKKKKKKKKWWWWWWWWWWWWWWWWWWWWW#########
// #######WWWWWWWWWWWWWWWWWWWWWKKKKKKKKKKKKKEEEEEEDDDDGDDDEEEEKKKKKKKKKKWWWWWWWWWWWWWWWWWWWWWW#########
// ########WWWWWWWWWWWWWWWWWWWWWWKKKKKKKKKKKKKEEEEEEDDDDEEEEEKKKKKKKKKKWWWWWWWWWWWWWWWWWWWWWW##########
// #########WWWWWWWWWWWWWWWWWWWWWWWKKKKKKKKKKKKKEEEEEEEEEEEEKKKKKKKKKKWWWWWWWWWWWWWWWWWWWWW############
// ##########WWWWWWWWWWWWWWWWWWWWWWWWKKKKKKKKKKKKKEEEEEEEKKKKKKKKKKKWWWWWWWWWWWWWWWWWWWWWWWW###########
// ###########WWWWWWWWWWWWWWWWWWWWWWWWWKKKKKKKKKKKKKKKKKKKKKKKKKKKKWWWWWWWWWWWWWWWWWWWWWW##############
// ############WWWWWWWWWWWWWWWWWWWWWWWWKKKKKKKKKKKKKKKKKKKKKKKKKKKWWWWWWWWWWWWWWWWWWWWWWWW#############
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "../interfaces/ILayerZeroEndpoint.sol";
import "../interfaces/ILayerZeroReceiver.sol";

contract OmniChainNFT is Ownable, ERC721, ILayerZeroReceiver {
    uint256 counter = 0;
    uint256 nextId = 0;
    uint256 MAX = 100;
    uint256 gas = 350000;
    ILayerZeroEndpoint public endpoint;
    mapping(uint256 => bytes) public uaMap;

    event ReceiveNFT(
        uint16 _srcChainId,
        address _from,
        uint256 _tokenId,
        uint256 counter
    );

    constructor(
        address _endpoint,
        uint256 startId,
        uint256 _max
    ) ERC721("OmniChainNFT", "OOCCNFT") {
        endpoint = ILayerZeroEndpoint(_endpoint);
        nextId = startId;
        MAX = _max;
    }

    function setUaAddress(uint256 _dstId, bytes calldata _uaAddress)
        public
        onlyOwner
    {
        uaMap[_dstId] = _uaAddress;
    }

    function mint() external payable {
        require(nextId + 1 <= MAX, "Exceeds supply");
        nextId += 1;
        _safeMint(msg.sender, nextId);
        counter += 1;
    }

    function crossChain(
        uint16 _dstChainId,
        bytes calldata _destination,
        uint256 tokenId
    ) public payable {
        require(msg.sender == ownerOf(tokenId), "Not the owner");
        // burn NFT
        _burn(tokenId);
        counter -= 1;
        bytes memory payload = abi.encode(msg.sender, tokenId);

        // encode adapterParams to specify more gas for the destination
        uint16 version = 1;
        bytes memory adapterParams = abi.encodePacked(version, gas);

        (uint256 messageFee, ) = endpoint.estimateFees(
            _dstChainId,
            address(this),
            payload,
            false,
            adapterParams
        );

        require(
            msg.value >= messageFee,
            "Must send enough value to cover messageFee"
        );

        endpoint.send{value: msg.value}(
            _dstChainId,
            _destination,
            payload,
            payable(msg.sender),
            address(0x0),
            adapterParams
        );
    }

    function lzReceive(
        uint16 _srcChainId,
        bytes memory _from,
        uint64,
        bytes memory _payload
    ) external override {
        require(msg.sender == address(endpoint));
        require(
            _from.length == uaMap[_srcChainId].length &&
                keccak256(_from) == keccak256(uaMap[_srcChainId]),
            "Call must send from valid user application"
        );
        address from;
        assembly {
            from := mload(add(_from, 20))
        }
        (address toAddress, uint256 tokenId) = abi.decode(
            _payload,
            (address, uint256)
        );

        // mint the tokens
        _safeMint(toAddress, tokenId);
        counter += 1;
        emit ReceiveNFT(_srcChainId, toAddress, tokenId, counter);
    }

    // Endpoint.sol estimateFees() returns the fees for the message
    function estimateFees(
        uint16 _dstChainId,
        address _userApplication,
        bytes calldata _payload,
        bool _payInZRO,
        bytes calldata _adapterParams
    ) external view returns (uint256 nativeFee, uint256 zroFee) {
        return
            endpoint.estimateFees(
                _dstChainId,
                _userApplication,
                _payload,
                _payInZRO,
                _adapterParams
            );
    }
}
